@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using EventService.Client.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@attribute [AllowAnonymous]

<PageTitle>EventService</PageTitle>

<AuthorizeView Roles="User">
    <Authorized>   
        <p>Hello @context.User.Identity!.Name you are registered for the events highlighted in green! </p>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Admin">
    <Authorized>
        <p>You have an 'Admin' role claim.</p>
    </Authorized>
</AuthorizeView>



<h1>Events</h1>
<AuthorizeView Roles="Admin">
    <button @onclick="() => NavigateToCreateEvent()">Create Event</button>
</AuthorizeView>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Date</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var eventObject in events)
        {
            //Abhängig davon ob die aktuelle eventObject Id in eventIdsOfUser ist, soll die Zeile farblich unterlegt werden
            if (eventIdsOfUser.Contains(eventObject.Id))
            {
                <tr style="background-color: lightgreen;">
                    <td>@eventObject.Name</td>
                    <td>@eventObject.StartDate</td>
                    <td>@eventObject.EndDate</td>
                    <td>@eventObject.Description</td>
                    <td>@eventObject.Id</td>
                    <td><button @onclick="() => NavigateToEventDetails(eventObject.Id)">Details</button></td>
                </tr>
            }
            else
            {
                <tr>
                    <td>@eventObject.Name</td>
                    <td>@eventObject.StartDate</td>
                    <td>@eventObject.EndDate</td>
                    <td>@eventObject.Description</td>
                    <td>@eventObject.Id</td>
                    <td><button @onclick="() => NavigateToEventDetails(eventObject.Id)">Details</button></td>
                </tr>
            }
        }
    </tbody>
</table>

@code {

    private IEnumerable<Event> events = new List<Event>();

    private List<Guid> eventIdsOfUser = new List<Guid>();

    protected override async Task OnInitializedAsync()
    {
        try {
            events = await Http.GetFromJsonAsync<IEnumerable<Event>>(@"http://localhost/eventservice/Event");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var user = authState.User;
        //Hole hier die EventSubscription des angemeldeten Users für farbliche Unterlegung angemeldete Events
        if (user.Identity.IsAuthenticated && user.IsInRole("User"))
        {
            var eventSubscriptionOfRegisteredUser = await Http.GetFromJsonAsync<IEnumerable<EventSubscription>>($"http://localhost/eventservice/api/EventSubscription/GetByEMail/{user.Identity!.Name}");

            eventIdsOfUser = eventSubscriptionOfRegisteredUser.Select(x => x.EventId).ToList();
        }
    }

    async Task NavigateToEventDetails(Guid id)
    {
        NavigationManager.NavigateTo($"EventDetails/{id}");
    }

    async Task NavigateToCreateEvent()
    {
        NavigationManager.NavigateTo("CreateEvent");
    }
}



