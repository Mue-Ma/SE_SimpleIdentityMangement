@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using EventService.Client.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@attribute [AllowAnonymous]

<PageTitle>EventService</PageTitle>

<h1>EventOverview</h1>

<AuthorizeView Roles="admin">
    <Authorized>
        <button class="btn btn-primary" 
        style=" position: fixed; bottom: 40px; right: 40px; font-size: large; font-weight: 600; border-radius: 50px; padding: 15px" 
        @onclick="() => NavigateToCreateEvent()">
            Create Event
        </button>
    </Authorized>
</AuthorizeView>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Description</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var eventObject in events)
        {
            <tr>
                <td>@eventObject.Name</td>
                <td>@eventObject.StartDate</td>
                <td>@eventObject.EndDate</td>
                <td>@eventObject.Description</td>
                <td><button class=@(eventIdsOfUser.Contains(eventObject.Id) ? "btn btn-primary" : "btn btn-outline-primary") @onclick="() => NavigateToEventDetails(eventObject.Id)">Details</button></td>
            </tr>
        }
    </tbody>
</table>

@code {

    private IEnumerable<Event> events = new List<Event>();
    private List<Guid> eventIdsOfUser = new List<Guid>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await GetAuthenticationStateAsync.GetAuthenticationStateAsync()).User;

        try
        {
            events = await Http.GetFromJsonAsync<IEnumerable<Event>>(@"http://localhost/eventservice/Event") ?? new List<Event>();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        //Hole hier die EventSubscription des angemeldeten Users für farbliche Unterlegung angemeldete Events
        if (user.Identity!.IsAuthenticated && user.IsInRole("user"))
        {
            var eventSubscriptionOfRegisteredUser = await Http.GetFromJsonAsync<IEnumerable<EventSubscription>>($"http://localhost/eventservice/api/EventSubscription/GetByEMail/{user.Identity!.Name}");

            if (eventSubscriptionOfRegisteredUser != null)
            {
                eventIdsOfUser = eventSubscriptionOfRegisteredUser.Select(x => x.EventId).ToList();
            }
        }
    }

    private void NavigateToEventDetails(Guid id)
    {
        NavigationManager.NavigateTo($"EventDetails/{id}");
    }

    private void NavigateToCreateEvent()
    {
        NavigationManager.NavigateTo("CreateEvent");
    }

}
