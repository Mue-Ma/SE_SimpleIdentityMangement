@page "/"

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@inject NavigationManager NavigationManager
@inject IEventService EventService

@attribute [AllowAnonymous]

<PageTitle>EventService</PageTitle>

<h1>EventOverview</h1>
<CascadingValue Value="@_events" Name="Events">
    <EventFilter EventsChanged="FilterHandler"></EventFilter>
    <ErrorBoundary @ref="errorBoundary">
        <ChildContent>
            <EventTable></EventTable>
        </ChildContent>
        <ErrorContent>
            <p class="my-custom-class">No events found</p>
        </ErrorContent>
    </ErrorBoundary>
</CascadingValue>


<AuthorizeView Roles="admin">
    <Authorized>
        <button class="btn btn-primary"
                style=" position: fixed; bottom: 40px; right: 40px; font-size: large; font-weight: 600; border-radius: 50px; padding: 15px"
                @onclick="() => NavigateToCreateEvent()">
            Create Event
        </button>
    </Authorized>
</AuthorizeView>

@code {

    private IEnumerable<Event> _events = new List<Event>();

    private ErrorBoundary? errorBoundary;

    protected override async Task OnInitializedAsync()
    {
        _events = await EventService.GetEvents();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        errorBoundary?.Recover();
    }

    private void NavigateToCreateEvent()
    {
        NavigationManager.NavigateTo("CreateEvent");
    }

    private void FilterHandler(IEnumerable<Event> events)
    {
        _events = events;
    }
}
