@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using EventService.Client.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager

@attribute [AllowAnonymous]

<PageTitle>EventService</PageTitle>

<AuthorizeView>
    <Authorized>
        <p>You @context.User.Identity.Name are authorized.</p>
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized.</p>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="User">
    <Authorized>   
        <p>You have an 'User' role claim.</p>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="Admin">
    <Authorized>
        <p>You have an 'Admin' role claim.</p>
    </Authorized>
</AuthorizeView>



<h1>Events</h1>
<button @onclick="() => NavigateToCreateEvent()">Create Event</button>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Date</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var eventObject in events2)
        {
        <tr>
                <td>@eventObject.Name</td>
                <td>@eventObject.Name</td>
                <td>@eventObject.StartDate</td>
                <td>@eventObject.EndDate</td>
                <td>@eventObject.Description</td>
                <td>@eventObject.Id</td>
                <td><button @onclick="() => NavigateToEventDetails(eventObject.Id)">Details</button></td>
        </tr>
        }
    </tbody>
</table>

@code {
    private List<EventObject> events; 

    private Event[]? events2;

    protected override async Task OnInitializedAsync()
    {
        try {
            events2 = await Http.GetFromJsonAsync<Event[]>(@"http://localhost/eventservice/Event");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        events = new List<EventObject>();
        EventObject footballGame = new EventObject();
        footballGame.Id = 1;
        footballGame.EventName = "Real Madrid - Manchester City";
        footballGame.EventType = "Football Game";
        footballGame.EventLocation = "Bernabeu, Madrid";
        footballGame.EventDate = new DateTime(2024, 4, 15, 14, 30, 0);
        footballGame.AvailableTickets = 80244;
        footballGame.TicketPrice = 10;

        EventObject concert = new EventObject();
        concert.EventName = "MTBMB Tour";
        concert.Id = 2;
        concert.EventType = "concert";
        concert.EventLocation = "Olympia Stadion, Munich";
        concert.EventDate = new DateTime(2024, 4, 15, 14, 30, 0);
        concert.AvailableTickets = 30000;
        concert.TicketPrice = 10;

        events.Add(footballGame);
        events.Add(concert);
    }

    async Task NavigateToEventDetails(Guid id)
    {
        NavigationManager.NavigateTo($"EventDetails/{id}");
    }

    async Task NavigateToEventDetailsAdmin(Guid id)
    {
        NavigationManager.NavigateTo($"EventDetailsAdmin/{id}");
    }

    async Task NavigateToCreateEvent()
    {
        NavigationManager.NavigateTo("CreateEvent");
    }

    public class EventObject
    {
    public int Id { get; set; }

    public string EventName { get; set; }

    public string EventType { get; set; } //Konzert, Fußballspiel, etc.

    public string EventLocation { get; set; }

    public DateTime EventDate { get; set; }

    public int AvailableTickets { get; set; }

    public decimal TicketPrice { get; set; }
    }
}



