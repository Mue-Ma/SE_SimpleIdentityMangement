@page "/"

@using System.Security.Claims
@using EventService.Client.Services.Contracts
@using Microsoft.AspNetCore.Components.Authorization
@using EventService.Client.Models

@inject NavigationManager NavigationManager
@inject IEventService EventService

@attribute [AllowAnonymous]

<PageTitle>EventService</PageTitle>

<h1>EventOverview</h1>

<table class="table">
    <thead>
        <tr>
            <EventFilter OnEventsChanged="HandleEventsChanged"></EventFilter>
        </tr>
    </thead>
    <tbody>
        @foreach (var eventObject in _events)
        {
            <tr>
                <td>@eventObject.Name</td>
                <td>@eventObject.StartDate</td>
                <td>@eventObject.EndDate</td>
                <td>@eventObject.Description</td>
                <td><button class=@(_eventIdsOfUser.Contains(eventObject.Id) ? "btn btn-primary" : "btn btn-outline-primary") @onclick="() => NavigateToEventDetails(eventObject.Id)">Details</button></td>
            </tr>
        }
    </tbody>
</table>

<AuthorizeView Roles="admin">
    <Authorized>
        <button class="btn btn-primary"
                style=" position: fixed; bottom: 40px; right: 40px; font-size: large; font-weight: 600; border-radius: 50px; padding: 15px"
                @onclick="() => NavigateToCreateEvent()">
            Create Event
        </button>
    </Authorized>
</AuthorizeView>

@code {

    private IEnumerable<Event> _events = new List<Event>();
    private List<Guid> _eventIdsOfUser = new List<Guid>();

    protected override async Task OnInitializedAsync()
    {
        _events = await EventService.GetEvents();
        _eventIdsOfUser = (await EventService.GetSubscriptionsByIdentity()).Select(x => x.EventId).ToList();
    }

    private void NavigateToEventDetails(Guid id)
    {
        NavigationManager.NavigateTo($"EventDetails/{id}");
    }

    private void NavigateToCreateEvent()
    {
        NavigationManager.NavigateTo("CreateEvent");
    }

    private void HandleEventsChanged(IEnumerable<Event> FilteredEvents)
    {
        _events = FilteredEvents;
    }
}
