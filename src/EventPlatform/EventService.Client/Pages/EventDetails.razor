@page "/EventDetails/{id}"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using EventService.Client.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h1>EventDetails</h1>
<Toasts class="p-3" Messages="messages" Delay=5000 Placement="ToastsPlacement.BottomRight" />
<AuthorizeView>
    <dl class="row">

        @if (EventToShow != null)
        {
            <EditForm Model="@EventToShow" Context="editContext" OnValidSubmit="UpdateEvent">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <dt class="col-sm-2">Event Name</dt>
                    <InputText id="Name" class="form-control" @bind-Value="EventToShow.Name" disabled=@IsNotAdmin />
                </div>

                <div class="form-group">
                    <dt class="col-sm-2">Start Date</dt>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/yyyy hh:mm:ss" @bind-Value="EventToShow.StartDate" disabled=@IsNotAdmin />
                </div>

                <div class="form-group">
                    <dt class="col-sm-2">End Date</dt>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/yyyy hh:mm:ss" @bind-Value="EventToShow.EndDate" disabled=@IsNotAdmin />
                </div>

                <div class="form-group">
                    <dt class="col-sm-2">Description</dt>
                    <InputText id="Name" class="form-control" @bind-Value="EventToShow.Description" disabled=@IsNotAdmin />
                </div>

                <AuthorizeView Roles="admin" Context="adminContext">
                    <button class="btn btn-primary" type="submit">Aktualisieren</button>
                    <button class="btn btn-primary" @onclick="DeleteEvent">Löschen</button>
                </AuthorizeView>

            </EditForm>
        }
        else
        {
            <p>Event not found</p>
        }

        <AuthorizeView Roles="admin" Context="adminContext">
            <hr style="margin-top:20px" />
            <h2>Aktuelle Anmeldungen</h2>
            <div class="form-group">
                <dt class="col-sm-2">Registrations: </dt>
                <dd class="col-sm-2">@CountRegistrations</dd>
            </div>

            <div class="form-group">
                <dt class="col-sm-2">Total amount vistors: </dt>
                <dd class="col-sm-2">@TotalAmontVisitors</dd>
            </div>

            <h3>Event Anmeldungen</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Benutzer</th>
                        <th>Anzahl Begleiter</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var subscriptionForAdmin in EventSubscriptionsAdminView)
                    {
                        <tr>
                            <td>@subscriptionForAdmin.EMail</td>
                            <td>@subscriptionForAdmin.Companions</td>
                            <td><button @onclick="() => DeregisterUserForEventByAdmin(subscriptionForAdmin.Id)">Abmelden</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </AuthorizeView>

        <AuthorizeView Roles="user" Context="innerUserContext">
            <hr style="margin-top:20px" />
            <h2>Registrierung</h2>
            <div class="form-group">
                <dt class="col-sm-2">Anzahl Begleiter</dt>
                <input type="number" id="companions" @bind="Companions" class="form-control" />
            </div>
            <div class="form-group">
                @if (UserRegisteredForEvent)
                {

                    <button class="btn btn-primary" @onclick="DeregisterForEvent">Abmelden</button>
                    <button class="btn btn-primary" @onclick="ChangeCompanions">Begleiteranzahl ändern</button>

                }
                else
                {
                    <button class="btn btn-primary" @onclick="RegisterForEvent">Anmelden</button>
                }
            </div>
        </AuthorizeView>
    </dl>
</AuthorizeView>

@code {
    [Parameter]
    public string Id { get; set; }

    public int Companions { get; set; }

    public bool UserRegisteredForEvent { get; set; }

    public EventSubscription? Subscription { get; set; }

    public ClaimsPrincipal User = new ClaimsPrincipal();

    public bool IsNotAdmin { get; set; }

    public int CountRegistrations { get; set; }

    public int TotalAmontVisitors { get; set; }

    public Event? EventToShow;

    public IEnumerable<EventSubscription> EventSubscriptionsAdminView = new List<EventSubscription>();

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string text) => messages.Add(CreateToastMessage(toastType, text));

    private ToastMessage CreateToastMessage(ToastType toastType, string text)
    => new ToastMessage
        {
            Type = toastType,
            Message = text,
            AutoHide = true
        };


    protected override async Task OnInitializedAsync()
    {
        IsNotAdmin = !User.IsInRole("admin");
        User = (await GetAuthenticationStateAsync.GetAuthenticationStateAsync()).User;
        EventToShow = await Http.GetFromJsonAsync<Event>($"http://localhost/eventservice/Event/{Id}");

        var response = await Http.GetAsync($"http://localhost/eventservice/api/EventSubscription/GetByEventIdAndEmail/{Id}&&{User.Identity!.Name}");

        if (response.IsSuccessStatusCode)
        {
            Subscription = await response.Content.ReadFromJsonAsync<EventSubscription>();
            Companions = Subscription!.Companions;
            UserRegisteredForEvent = true;
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            UserRegisteredForEvent = false;
        }

        await FetchSubscriptionInfoForAdmin();
    }

    public async Task FetchSubscriptionInfoForAdmin()
    {
        EventSubscriptionsAdminView = await Http.GetFromJsonAsync<IEnumerable<EventSubscription>?>($"http://localhost/eventservice/api/EventSubscription/GetByEventId/{Id}") ?? new List<EventSubscription>();
        CountRegistrations = EventSubscriptionsAdminView.Count();
        TotalAmontVisitors = EventSubscriptionsAdminView.Sum(x => x.Companions) + CountRegistrations;
    }

    public async Task RegisterForEvent()
    {
        EventSubscription subscriptionToPost = new EventSubscription
            {
                EventId = Guid.Parse(Id),
                EMail = User.Identity!.Name!,
                Companions = Companions
            };

        var res = await Http.PostAsJsonAsync("http://localhost/eventservice/api/EventSubscription", subscriptionToPost);
        if (res.IsSuccessStatusCode)
        {
            Subscription = await Http.GetFromJsonAsync<EventSubscription>($"http://localhost/eventservice/api/EventSubscription/GetByEventIdAndEmail/{Id}&&{User.Identity.Name}");
            UserRegisteredForEvent = true;
            ShowMessage(ToastType.Success, $"Registrierung für {Subscription?.Companions + 1} Personen war erfolgreich");
        }
        else ShowMessage(ToastType.Danger, $"Etwas is bei der Registrierung schief gegangen.");

        StateHasChanged();
    }

    public async Task DeregisterForEvent()
    {
        UserRegisteredForEvent = false;

        var res = await Http.DeleteAsync($"http://localhost/eventservice/api/EventSubscription/{Subscription!.Id}");

        if (res.IsSuccessStatusCode)
        {
            Subscription = null;
            ShowMessage(ToastType.Success, $"Abmeldung für {Subscription?.Companions + 1} Personen war erfolgreich");
        }
        else ShowMessage(ToastType.Danger, $"Etwas is bei der Abmeldung schief gegangen.");


        StateHasChanged();
    }

    public async Task DeregisterUserForEventByAdmin(Guid subscriptionID)
    {
        var res = await Http.DeleteAsync($"http://localhost/eventservice/api/EventSubscription/{subscriptionID}");

        if (res.IsSuccessStatusCode) ShowMessage(ToastType.Success, $"Abmeldung der Registrierung {subscriptionID} war erfolgreich");
        else ShowMessage(ToastType.Danger, $"Etwas is bei der Abmeldung schief gegangen.");

        await FetchSubscriptionInfoForAdmin();
        StateHasChanged();
    }

    public async Task ChangeCompanions()
    {
        Subscription!.Companions = Companions;
        var res = await Http.PutAsJsonAsync("http://localhost/eventservice/api/EventSubscription", Subscription);

        if (res.IsSuccessStatusCode) ShowMessage(ToastType.Success, $"Änderung der Beigelieter auf {Subscription?.Companions + 1} Personen war erfolgreich");
        else ShowMessage(ToastType.Danger, $"Etwas is bei der Änderung schief gegangen.");
    }

    public async Task UpdateEvent()
    {
        var res = await Http.PutAsJsonAsync($"http://localhost/eventservice/Event", EventToShow);
        if (res.IsSuccessStatusCode) ShowMessage(ToastType.Success, $"Änderung des Events war erfolgreich");
        else ShowMessage(ToastType.Danger, $"Etwas is bei der Änderung schief gegangen.");
    }

    public async Task DeleteEvent()
    {

        var deleteResponse = await Http.DeleteAsync($"http://localhost/eventservice/Event/{Id}");
        if (!deleteResponse.IsSuccessStatusCode)
        {
            string errorMessage = $"Error: {deleteResponse.StatusCode}";
            NavigationManager.NavigateTo($"/ErrorPages/ErrorPage?message={Uri.EscapeDataString(errorMessage)}");
        }

        NavigationManager.NavigateTo("/");
    }
}
