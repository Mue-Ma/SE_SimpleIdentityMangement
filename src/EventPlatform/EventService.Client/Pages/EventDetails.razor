@page "/EventDetails/{id}"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using EventService.Client.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h1>EventDetails</h1>

<AuthorizeView>
    <dl class="row">
        @if (EventToShow != null)
        {
            <EditForm Model="@EventToShow" Context="editContext">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <dt class="col-sm-2">Event Name</dt>
                    <InputText id="Name" class="form-control" @bind-Value="EventToShow.Name" disabled=@IsNormalUser />
                </div>

                <div class="form-group">
                    <dt class="col-sm-2">Start Date</dt>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/yyyy hh:mm:ss" @bind-Value="EventToShow.StartDate" disabled=@IsNormalUser />
                </div>

                <div class="form-group">
                    <dt class="col-sm-2">End Date</dt>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/yyyy hh:mm:ss" @bind-Value="EventToShow.EndDate" disabled=@IsNormalUser />
                </div>

                <div class="form-group">
                    <dt class="col-sm-2">Description</dt>
                    <InputText id="Name" class="form-control" @bind-Value="EventToShow.Description" disabled=@IsNormalUser />
                </div>
            </EditForm>
        }
        else
        {
           <p>Event not found</p>
        }

        <AuthorizeView Roles="Admin" Context="innerAdminContext">

            <div class="form-group">
                <dt class="col-sm-2">Registrations: </dt>
                <dd class="col-sm-2">@CountRegistrations</dd>
            </div>

            <div class="form-group">
                <dt class="col-sm-2">Total amount vistors: </dt>
                <dd class="col-sm-2">@TotalAmontVisitors</dd>
            </div>

            <div class="form-group">
                <button class="btn btn-primary" @onclick="UpdateEvent">Aktualisieren</button>
                <button class="btn btn-primary" @onclick="DeleteEvent">Löschen</button>
            </div>

            <h3>Event Anmeldungen</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Benutzer</th>
                        <th>Anzahl Begleiter</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var subscriptionForAdmin in EventSubscriptionsAdminView)
                    {
                        <tr>
                            <td>@subscriptionForAdmin.EMail</td>
                            <td>@subscriptionForAdmin.Companions</td>
                            <td><button @onclick="() => DeRegisterUserForEventAdmin(subscriptionForAdmin.Id)">Abmelden</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </AuthorizeView>

        <AuthorizeView Roles="User" Context="innerUserContext">
            <div class="form-group">
                <dt class="col-sm-2">Anzahl Begleiter</dt>
                <input type="number" id="companions" @bind="Companions" class="form-control" />
            </div>
            @if (UserRegisteredForEvent)
            {
                <div class="form-group">
                    <button class="btn btn-primary" @onclick="DeRegisterForEvent">Abmelden</button>
                    <button class="btn btn-primary" @onclick="ChangeCompanions">Begleiteranzahl ändern</button>
                </div>
            }
            else
            {
                <button class="btn btn-primary" @onclick="RegisterForEvent">Anmelden</button>
            }

        </AuthorizeView>
    </dl>
</AuthorizeView>
@code {
    [Parameter]
    public string Id { get; set; }

    public int Companions { get; set; }

    public bool UserRegisteredForEvent { get; set; }

    public EventSubscription? Subscription { get; set; }

    public ClaimsPrincipal User = new ClaimsPrincipal();

    public bool IsNormalUser { get; set; }

    public int CountRegistrations { get; set; }

    public int TotalAmontVisitors { get; set; }

    public Event? EventToShow; 

    public IEnumerable<EventSubscription> EventSubscriptionsAdminView = new List<EventSubscription>();


    protected override async Task OnInitializedAsync()
    {

        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        User = authstate.User;

        IsNormalUser = User.IsInRole("User");

        EventToShow = await Http.GetFromJsonAsync<Event>($"http://localhost/eventservice/Event/{Id}");

        var response = await Http.GetAsync($"http://localhost/eventservice/api/EventSubscription/GetByEventIdAndEmail/{Id}&&{User.Identity!.Name}");

        if (response.IsSuccessStatusCode)
        {
            Subscription = await response.Content.ReadFromJsonAsync<EventSubscription>();
            Companions = Subscription!.Companions;
            UserRegisteredForEvent = true;
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            UserRegisteredForEvent = false;
        }

        await FetchSubscriptionInfoForAdmin();
    }

    public async Task FetchSubscriptionInfoForAdmin()
    {
        EventSubscriptionsAdminView = await Http.GetFromJsonAsync<IEnumerable<EventSubscription>?>($"http://localhost/eventservice/api/EventSubscription/GetByEventId/{Id}") ?? new List<EventSubscription>();

        CountRegistrations = EventSubscriptionsAdminView.Count();
        TotalAmontVisitors = EventSubscriptionsAdminView.Sum(x => x.Companions) + CountRegistrations;
    }

    public async Task RegisterForEvent()
    {
        EventSubscription subscriptionToPost = new EventSubscription
            {
                EventId = Guid.Parse(Id),
                EMail = User.Identity!.Name!,
                Companions = Companions
            };

        await Http.PostAsJsonAsync("http://localhost/eventservice/api/EventSubscription", subscriptionToPost);

        Subscription = await Http.GetFromJsonAsync<EventSubscription>($"http://localhost/eventservice/api/EventSubscription/GetByEventIdAndEmail/{Id}&&{User.Identity.Name}");

        UserRegisteredForEvent = true;
        StateHasChanged();
    }

    public async Task DeRegisterForEvent()
    {
        UserRegisteredForEvent = false;

        await Http.DeleteAsync($"http://localhost/eventservice/api/EventSubscription/{Subscription!.Id}");
        Subscription = null;

        StateHasChanged();
    }

    public async Task DeRegisterUserForEventAdmin(Guid subscriptionID)
    {

        await Http.DeleteAsync($"http://localhost/eventservice/api/EventSubscription/{subscriptionID}");

        await FetchSubscriptionInfoForAdmin();
        StateHasChanged();
    }

    public async Task ChangeCompanions()
    {
        Subscription!.Companions = Companions;

        await Http.PutAsJsonAsync("http://localhost/eventservice/api/EventSubscription", Subscription);
    }

    public async Task UpdateEvent()
    {
        await Http.PutAsJsonAsync($"http://localhost/eventservice/Event", EventToShow);
    }

    public async Task DeleteEvent()
    {
        await Http.DeleteAsync($"http://localhost/eventservice/Event/{Id}");
        NavigationManager.NavigateTo("");
    }
}
