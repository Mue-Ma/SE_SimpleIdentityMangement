@page "/EventDetails/{id}"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using EventService.Client.Models

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<AuthorizeView>
    <Authorized>
    <h1>EventDetails</h1>

    <dl class="row">

        <EditForm Model="@EventToShow">
            <ChildContent Context="editContext">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="Name">Name</label>
                    <InputText id="Name" class="form-control" @bind-Value="EventToShow.Name" />
            </div>

            <div class="form-group">
                <label for="StartDate">Start Date</label>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/yyyy hh:mm:ss" @bind-Value="EventToShow.StartDate" />
            </div>

            <div class="form-group">
                <label for="EndDate">End Date</label>
                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="dd/MM/yyyy hh:mm:ss" @bind-Value="EventToShow.EndDate" />
            </div>

            <div class="form-group">
                <label for="Description">Description</label>
                    <InputText id="Name" class="form-control" @bind-Value="EventToShow.Description" />
            </div>
            </ChildContent>
        </EditForm>

        <div class="col-sm-2">Registrations</div>
        <input type="number" id="Registrations" @bind="CountRegistrations" class="form-control" />

        <dt class="col-sm-2">Total amount vistors</dt>
        <input type="number" id="TotalAmontVisitors" @bind="TotalAmontVisitors" class="form-control" />

        <dt class="col-sm-2">Anzahl Begleiter</dt>
        <input type="number" id="companions" @bind="Companions" class="form-control" />


        <div class="form-group">
            <button class="btn btn-primary" @onclick="UpdateEvent">Aktualisieren</button>
            <button class="btn btn-primary" @onclick="DeleteEvent">Löschen</button>
        </div>

        @if (UserRegisteredForEvent)
        {
            <div class="form-group">
                <button class="btn btn-primary" @onclick="DeRegisterForEvent">Abmelden</button>
                <button class="btn btn-primary" @onclick="ChangeCompanions">Begleiteranzahl ändern</button>
            </div>
        }
        else
        {
            <button class="btn btn-primary" @onclick="RegisterForEvent">Anmelden</button>
        }

        <h2></h2>
        <h2>Event Anmeldungen</h2>

        <table class="table">
            <thead>
                <tr>
                    <th>Benutzer</th>
                    <th>Anzahl Begleiter</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var subscriptionForAdmin in EventSubscriptionsAdminView)
                {
                    <tr>
                            <td>@subscriptionForAdmin.EMail</td>
                            <td>@subscriptionForAdmin.Companions</td>
                            <td><button @onclick="() => DeRegisterUserForEventAdmin(subscriptionForAdmin.Id)">Abmelden</button></td>
                    </tr>
                }
            </tbody>
        </table>

     </dl>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string Id { get; set; }

    public Event EventToShow { get; set; }

    public int Companions { get; set; }

    public bool UserRegisteredForEvent { get; set; }

    public EventSubscription? Subscription { get; set; }

    public ClaimsPrincipal User { get; set; }

    public int CountRegistrations { get; set; }

    public int TotalAmontVisitors { get; set; }

    public IEnumerable<EventSubscription> EventSubscriptionsAdminView { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        User = authstate.User;

        EventToShow = await Http.GetFromJsonAsync<Event>($"http://localhost/eventservice/Event/{Id}");

        var eventSubscriptionOfRegisteredUser = await Http.GetFromJsonAsync<IEnumerable<EventSubscription>>($"http://localhost/eventservice/api/EventSubscription/GetByEMail/{User.Identity.Name}");

        if (eventSubscriptionOfRegisteredUser.Any(x => x.EventId == Guid.Parse(Id)))
        {
            UserRegisteredForEvent = true;
            Subscription = eventSubscriptionOfRegisteredUser.First(x => x.EventId == Guid.Parse(Id));
            Companions = Subscription.Companions;
        }
        else
        {
            UserRegisteredForEvent = false;
        }

        await FetchSubscriptionInfoForAdmin();
    }

    public async Task FetchSubscriptionInfoForAdmin()
    {
        // Fix this
        EventSubscriptionsAdminView = new List<EventSubscription>();
        EventSubscriptionsAdminView = await Http.GetFromJsonAsync<IEnumerable<EventSubscription>>($"http://localhost/eventservice/api/EventSubscription/GetByEventId/{Id}");

        CountRegistrations = EventSubscriptionsAdminView.Count();
        TotalAmontVisitors = EventSubscriptionsAdminView.Sum(x => x.Companions) + CountRegistrations;
    }

    public async Task RegisterForEvent()
    {
        EventSubscription subscriptionToPost = new EventSubscription
            {
                EventId = Guid.Parse(Id),
                EMail = User.Identity.Name,
                Companions = Companions
            };

        var response = await Http.PostAsJsonAsync("http://localhost/eventservice/api/EventSubscription", subscriptionToPost);

        Subscription = await Http.GetFromJsonAsync<EventSubscription>($"http://localhost/eventservice/api/EventSubscription/GetByEventIdAndEmail/{Id}&&{User.Identity.Name}");

        UserRegisteredForEvent = true;
        StateHasChanged();
    }

    public async Task DeRegisterForEvent()
    {
        UserRegisteredForEvent = false;

        var test = await Http.DeleteAsync($"http://localhost/eventservice/api/EventSubscription/{Subscription.Id}");
        Subscription = null;

        StateHasChanged();
    }

    // muss noch auf eine deregister methode zusammengelegt werden
    public async Task DeRegisterUserForEventAdmin(Guid subscriptionID)
    {
        UserRegisteredForEvent = false;

        var test = await Http.DeleteAsync($"http://localhost/eventservice/api/EventSubscription/{subscriptionID}");
        Subscription = null;

        FetchSubscriptionInfoForAdmin();
        StateHasChanged();
    }

    public async Task ChangeCompanions()
    {
        Subscription.Companions = Companions;

        var response = await Http.PutAsJsonAsync("http://localhost/eventservice/api/EventSubscription", Subscription);
    }

    public async Task UpdateEvent()
    {
        var response = await Http.PutAsJsonAsync($"http://localhost/eventservice/Event", EventToShow);
    }

    public async Task DeleteEvent()
    {
        await Http.DeleteAsync($"http://localhost/eventservice/Event/{Id}");
        NavigationManager.NavigateTo("");
    }
}
